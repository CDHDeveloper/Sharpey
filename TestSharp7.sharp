namespace UTIL
{
	import System;
	import System.Collections.Generic;
	import System.Linq;
	import System.Text;
	
    public class Xml
    {
        public function ReadDvdId(DvdIdFilePath)
        {
            string dvdId = "";

            var xmlDocument = new System.Xml.XmlDocument();
            xmlDocument.Load(DvdIdFilePath);

            var xmlNode = xmlDocument.FirstChild;
            xmlNode = xmlNode.NextSibling;

            foreach (var childXmlNode in xmlNode.ChildNodes)
            {
                if (childXmlNode.Name == "ID")
                {
                    dvdId = childXmlNode.InnerText;
                }
            }

            return dvdId;
        }

        public function WriteDVDIDXml(Title, DVDID, Location)
        {
            bool success = false;

            var xmlDoc = new System.Xml.XmlDocument();
            var xmlDeclaration = xmlDoc.CreateXmlDeclaration("1.0", "", "");
            xmlDoc.AppendChild(xmlDeclaration);

            var discNode = xmlDoc.CreateNode(System.Xml.XmlNodeType.Element, "Disc", "");
            xmlDoc.AppendChild(discNode);

            var nameNode = xmlDoc.CreateNode(System.Xml.XmlNodeType.Element, "Name", "");
            nameNode.InnerText = Title;
            discNode.AppendChild(nameNode);

            var idNode = xmlDoc.CreateNode(System.Xml.XmlNodeType.Element, "ID", "");
            idNode.InnerText = DVDID;
            discNode.AppendChild(idNode);

            try
            {
                xmlDoc.Save(Location);
                success = true;
            }
            catch (ex)
            {

            }

            return success;
        }

        public function ReadDvdInfoCacheXml( InfoCache)
        {
            if (InfoCache == null)
            {
                throw new ApplicationException("InfoCache is Null");
            }

            InfoCache.DvdInfoCacheXmlDocument = new System.Xml.XmlDocument();
            InfoCache.DvdInfoCacheXmlDocument.Load(InfoCache.DvdInfoCacheFilePath);

            // Xml Declaration
            var xmlNode = InfoCache.DvdInfoCacheXmlDocument.FirstChild;

            // METADATA Tag
            xmlNode = xmlNode.NextSibling;

            // MDR-DVD Tag
            xmlNode = xmlNode.FirstChild;

            foreach (var childXmlNode in xmlNode.ChildNodes)
            {
                switch (childXmlNode.Name)
                {
                    case "dvdTitle":
                        InfoCache.Title = childXmlNode.InnerText;
                        break;
                    case "largeCoverParams":
                        if (childXmlNode.InnerText.Length > 0)
                        {
                            InfoCache.IsLargeCoverParamsSet = true;
                        }
                        break;
                    case "smallCoverParams":
                        if (childXmlNode.InnerText.Length > 0)
                        {
                            InfoCache.IsSmallCoverParamsSet = true;
                        }
                        break;
                    default:
                        break;
                }
            }
        }

        public function EditDvdInfoCacheXml(InfoCache, Title, RemoveLargeCoverParams, RemoveSmallCoverParams)
        {
            if (InfoCache == null)
            {
                throw new ApplicationException("InfoCache is Null");
            }

            InfoCache.DvdInfoCacheXmlDocument = new System.Xml.XmlDocument();
            InfoCache.DvdInfoCacheXmlDocument.Load(InfoCache.DvdInfoCacheFilePath);

            // Xml Declaration
            var xmlNode = InfoCache.DvdInfoCacheXmlDocument.FirstChild;

            // METADATA Tag
            xmlNode = xmlNode.NextSibling;

            // MDR-DVD Tag
            xmlNode = xmlNode.FirstChild;

            var largeCoverParamsNode = null;
            var smallCoverParamsNode = null;
            foreach (var childXmlNode in xmlNode.ChildNodes)
            {
                switch (childXmlNode.Name)
                {
                    case "dvdTitle":
                        childXmlNode.InnerText = Title;
                        break;
                    case "largeCoverParams":
                        if (RemoveLargeCoverParams)
                        {
                            largeCoverParamsNode = childXmlNode;
                        }
                        break;
                    case "smallCoverParams":
                        if (RemoveSmallCoverParams)
                        {
                            smallCoverParamsNode = childXmlNode;
                        }
                        break;
                    default:
                        break;
                }
            }

            if (largeCoverParamsNode != null)
            {
                xmlNode.RemoveChild(largeCoverParamsNode);
            }

            if (smallCoverParamsNode != null)
            {
                xmlNode.RemoveChild(smallCoverParamsNode);
            }

            InfoCache.DvdInfoCacheXmlDocument.Save(InfoCache.DvdInfoCacheFilePath);
        }
    }
}